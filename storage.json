{
  "x-generator": "NSwag v13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v12.0.0.0))",
  "openapi": "3.0.0",
  "info": {
    "title": "My Title",
    "version": "1.0.0"
  },
  "paths": {
    "/api/IdentityProviders/{identityProviderId}/ClaimTypeNames": {
      "get": {
        "tags": [
          "ClaimTypeNames"
        ],
        "summary": "Get all Identity Provider Claim Type Names for an Identity Provider.",
        "operationId": "ClaimTypeNames_GetIdentityProviderClaimTypeNames",
        "parameters": [
          {
            "name": "identityProviderId",
            "in": "path",
            "required": true,
            "description": "Id of Identity Provider.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "query",
            "in": "query",
            "description": "Query to execute. Currently not supported.",
            "schema": {
              "type": "string",
              "default": "",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of Identity Providers to skip.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 3
          },
          {
            "name": "count",
            "in": "query",
            "description": "Maximum number of Identity Providers to return.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            },
            "x-position": 4
          }
        ],
        "responses": {	
          "200": {
            "description": "Identity Provider Type Names found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentityProviderClaimTypeName"
                    }
				  }
                }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Identity Provider not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "ClaimTypeNames"
        ],
        "summary": "Get Header for all Identity Provider Claims Type Names for an Identity Provider.",
        "operationId": "ClaimTypeNames_GetIdentityProviderClaimTypeNamesHeader",
        "parameters": [
          {
            "name": "identityProviderId",
            "in": "path",
            "required": true,
            "description": "Id of Identity Provider.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Header for Identity Provider Claim Type Names."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Identity Provider not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/IdentityProviders/{identityProviderId}/ClaimTypeNames/{identityProviderClaimTypeNameId}": {
      "get": {
        "tags": [
          "ClaimTypeNames"
        ],
        "summary": "Get an Identity Provider Claim Type Name from an Identity Provider.",
        "operationId": "ClaimTypeNames_GetIdentityProviderClaimTypeName",
        "parameters": [
          {
            "name": "identityProviderId",
            "in": "path",
            "required": true,
            "description": "Id of Identity Provider.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "identityProviderClaimTypeNameId",
            "in": "path",
            "required": true,
            "description": "Id of Identity Provider Claim Type Name.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Identity Proivder Claim Type Name specified.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProviderClaim"
                },
				        "example": {
				          "Id": "22",
				          "TypeName": "TypeName",
				          "Value": "Value",
				          "RoleIds":["RoleIds"]
				        }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
				        "schema": {
                  "$ref": "#/components/schemas/IdentityProviderClaim"
					      },
				        "examples":{
					        "jsonObject": {
					          "description": "401 Response",
                    "externalValue": "#https://raw.githubusercontent.com/sukhdev1103/OSI/master/temp.json"
                  }
				        }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Identity Provider, or Identity Provider Claim Type Name not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "ClaimTypeNames"
        ],
        "summary": "Get an Identity Provider Claim Type Name Header from an Identity Provider.",
        "operationId": "ClaimTypeNames_GetIdentityProviderClaimTypeNameHeader",
        "parameters": [
          {
            "name": "identityProviderId",
            "in": "path",
            "required": true,
            "description": "Id of Identity Provider.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "identityProviderClaimTypeNameId",
            "in": "path",
            "required": true,
            "description": "Id of Identity Provider Claim Type Name.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Header for Identity Provider Claim Type Name specified."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Identity Provider, or Identity Provider Claim Type Name not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/IdentityProviders/{identityProviderId}": {
      "get": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Returns an IdentityProvider object.",
        "operationId": "IdentityProviders_GetIdentityProvider",
        "parameters": [
          {
            "name": "identityProviderId",
            "in": "path",
            "required": true,
            "description": "Id of provider.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Identity Provider specified.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProvider"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Identity Provider not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Get header for an identity provider to check if the identity provider exists.",
        "operationId": "IdentityProviders_GetIdentityProviderHeader",
        "parameters": [
          {
            "name": "identityProviderId",
            "in": "path",
            "required": true,
            "description": "Id of provider.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Identity Provider found."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "IdentityProvider or Tenant not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/IdentityProviders/schemes/{scheme}": {
      "get": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Returns a list of IdentityProvider objects that follow a scheme.",
        "operationId": "IdentityProviders_GetIdentityProviderByScheme",
        "parameters": [
          {
            "name": "scheme",
            "in": "path",
            "required": true,
            "description": "Scheme name.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Identity Provider specified.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProvider"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Identity Provider not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Get header for a scheme to check its validity.",
        "operationId": "IdentityProviders_GetIdentityProviderSchemeHeader",
        "parameters": [
          {
            "name": "scheme",
            "in": "path",
            "required": true,
            "description": "Scheme name.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Identity Provider found."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Identity Provider not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/IdentityProviders": {
      "get": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Returns a list of IdentityProvider objects.",
        "operationId": "IdentityProviders_GetIdentityProviders",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Query to execute. Currently not supported.",
            "schema": {
              "type": "string",
              "default": "",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of providers to skip.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 2
          },
          {
            "name": "count",
            "in": "query",
            "description": "Maximum number of providers to return.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Identity Providers found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentityProvider"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid inputs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Get header for Identity Providers to get the total number of Identity Providers.",
        "operationId": "IdentityProviders_GetIdentityProvidersHeader",
        "responses": {
          "200": {
            "description": "Headers for Identity Providers found."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Tenant not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/Tenants/{tenantId}/AuthorizationCodeClients": {
      "post": {
        "tags": [
          "AuthorizationCodeClients"
        ],
        "summary": "Create an Authorization Code flow Client. No Secret will be generated for this\nClient.",
        "operationId": "AuthorizationCodeClients_CreateAuthorizationCodeClient",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "authorizationCodeClient",
          "description": "New AuthorizationCodeClient object.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AuthorizationCodeClient"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Authorization Code Client created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationCodeClient"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid inputs, or Client limit exceeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Operation timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Client Id already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "AuthorizationCodeClients"
        ],
        "summary": "Get all Authorization Code clients from a Tenant.\nOptionally, get a list of requested clients. Total number\nof clients in the Tenant set in the Total-Count header.",
        "operationId": "AuthorizationCodeClients_GetAuthorizationCodeClients",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Unordered list of ids for all clients to get. Empty or whitespace Ids will be ignored.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 2
          },
          {
            "name": "tag",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Only return Clients that have these tags.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 3
          },
          {
            "name": "query",
            "in": "query",
            "description": "Query to execute. Currently not supported.",
            "schema": {
              "type": "string",
              "default": "",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of clients to skip. From query.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 5
          },
          {
            "name": "count",
            "in": "query",
            "description": "Maximum number of clients to return.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "description": "Authorization Code Clients found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuthorizationCodeClient"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "AuthorizationCodeClients"
        ],
        "summary": "Return total number of Authorization Code clients in a Tenant.\nOptionally, check based on a list of requested clients. The\nvalue will be set in the Total-Count header. This endpoint\nis identical to the GET one but it does not return any objects\nin the body.",
        "operationId": "AuthorizationCodeClients_GetAuthorizationCodeClientsHeader",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Unordered list of ids for all clients to get. Empty or whitespace Ids will be ignored.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 2
          },
          {
            "name": "tag",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Only count Clients that have these tags.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Authorization Code Client headers."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Client or Tenant not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/Tenants/{tenantId}/AuthorizationCodeClients/{clientId}": {
      "put": {
        "tags": [
          "AuthorizationCodeClients"
        ],
        "summary": "Update an Authorization Code Client. It can take up to one hour\nfor update to manifest in the authentication process.",
        "operationId": "AuthorizationCodeClients_UpdateAuthorizationCodeClient",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "description": "Id of Client.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "authorizationCodeClient",
          "description": "Updated Authorization Code Client values. Properties that are not set or are null will not be changed.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AuthorizationCodeClient"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Authorization Code Client updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationCodeClient"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid inputs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Client or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Operation timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "AuthorizationCodeClients"
        ],
        "summary": "Get an Authorization Code Client from Tenant.",
        "operationId": "AuthorizationCodeClients_GetAuthorizationCodeClient",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "description": "Id of Client.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Authorization Code Client specified.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationCodeClient"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Client or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AuthorizationCodeClients"
        ],
        "summary": "Delete an Authorization Code Client. It can take up to one hour\nfor deletion to manifest in the authentication process. Access\ntokens issued to this client will be valid until their expiration.",
        "operationId": "AuthorizationCodeClients_DeleteAuthorizationCodeClient",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "description": "Id of Client.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Client or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Operation timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "AuthorizationCodeClients"
        ],
        "summary": "Validate that an Authorization Code Client exists in Tenant.",
        "operationId": "AuthorizationCodeClients_GetAuthorizationCodeClientHeader",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "description": "Id of Client.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Header for specified Authorization Code Client.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientCredentialClient"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Client or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Tenants/{tenantId}/AzureActiveDirectoryTenants/{aadTenantId}": {
      "post": {
        "tags": [
          "AzureActiveDirectoryTenants"
        ],
        "summary": "Add an Azure Active Directory Tenant to the OSIsoft Cloud Services Tenant.",
        "operationId": "AzureActiveDirectoryTenants_AddAadTenantToTenant",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of OSIsoft Cloud Services Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "aadTenantId",
            "in": "path",
            "required": true,
            "description": "Id or Domain Name of Azure Active Directory Tenant.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "201": {
            "description": "AzureActiveDirectoryTenant object created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AzureActiveDirectoryTenant"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid inputs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "OSIsoft Cloud Services Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Operation timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Id of Azure Active Directory Tenant. is already in use on the specified Tenant.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "AzureActiveDirectoryTenants"
        ],
        "summary": "Get Azure Active Directory Tenant from an OSIsoft Cloud Services Tenant.",
        "operationId": "AzureActiveDirectoryTenants_GetAadTenantForTenant",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of OSIsoft Cloud Services Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "aadTenantId",
            "in": "path",
            "required": true,
            "description": "Id of Azure Active Directory Tenant.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "AzureActiveDirectory specified.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AzureActiveDirectoryTenant"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid inputs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "OSIsoft Cloud Services Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AzureActiveDirectoryTenants"
        ],
        "summary": "Removal of Azure Active Directory Tenant from an OSIsoft Cloud Services Tenant is not supported.",
        "operationId": "AzureActiveDirectoryTenants_RemoveAadTenantFromTenant",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of OSIsoft Cloud Services Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "aadTenantId",
            "in": "path",
            "required": true,
            "description": "Id of Azure Active Directory Tenant to remove.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "NotSupportedException.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "AzureActiveDirectoryTenants"
        ],
        "summary": "Validate that Azure Active Directory Tenant exists in this OSIsoft Cloud Services Tenant.\nThis endpoint is identical to the GET one but\nit does not return any objects in the body.",
        "operationId": "AzureActiveDirectoryTenants_GetAadTenantHeaderForTenant",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of OSIsoft Cloud Services Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "aadTenantId",
            "in": "path",
            "required": true,
            "description": "Id of Azure Active Directory Tenant.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Header for specified Azure Active Directory Tenant."
          },
          "400": {
            "description": "Missing or invalid inputs."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "OSIsoft Cloud Services Tenant not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/Tenants/{tenantId}/AzureActiveDirectoryTenants": {
      "get": {
        "tags": [
          "AzureActiveDirectoryTenants"
        ],
        "summary": "Get all Azure Active Directory Tenants from an OSIsoft Cloud Services Tenant.",
        "operationId": "AzureActiveDirectoryTenants_GetAadTenantsForTenant",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of OSIsoft Cloud Services Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "query",
            "in": "query",
            "description": "Query to execute. Currently not supported.",
            "schema": {
              "type": "string",
              "default": "",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of Azure Active Directory tenants to skip.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 3
          },
          {
            "name": "count",
            "in": "query",
            "description": "Maximum number of Azure Active Directory tenants to return.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "List of AzureActiveDirectoryTenants found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AzureActiveDirectoryTenant"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "\nor\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "x-expectedSchemas": [
              {
                "description": "",
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  ]
                }
              },
              {
                "description": "",
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  ]
                }
              }
            ]
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "AzureActiveDirectoryTenants"
        ],
        "summary": "Return total number of Azure Active Directory tenants in a OSIsoft Cloud Services Tenant. This endpoint\nis identical to the GET one but it does not return any objects\nin the body.",
        "operationId": "AzureActiveDirectoryTenants_GetAadTenantsHeaderForTenant",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of OSIsoft Cloud Services Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Headers for AzureActiveDirectoryTenants found."
          },
          "400": {
            "description": "Missing or invalid inputs."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "OSIsoft Cloud Services Tenant not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/Tenants/{tenantId}/AzureActiveDirectoryTenants/{aadTenantId}/SendConsent": {
      "post": {
        "tags": [
          "AzureActiveDirectoryTenants"
        ],
        "summary": "Send consent for an Azure Active Directory Tenant. OSIsoft Cloud Services needs to be granted\npermission to interact with the Azure Active Directory tenant. Otherwise, users from this Azure Active Directory Tenant\ncannot accept invitations from OSIsoft Cloud Services and log in. You can read more about this\n[here](https://pisquare.osisoft.com/docs/DOC-3986-msa-consent-for-azure-active-directory).",
        "operationId": "AzureActiveDirectoryTenants_SendAadTenantConsentRequest",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of OSIsoft Cloud Services Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "aadTenantId",
            "in": "path",
            "required": true,
            "description": "Id of Azure Active Directory Tenant.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "consentInformation",
          "description": "ConsentInformation object.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ConsentInformation"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "204": {
            "description": "No content."
          },
          "400": {
            "description": "Missing or invalid inputs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "OSIsoft Cloud Services Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Tenants/{tenantId}/ClientCredentialClients": {
      "post": {
        "tags": [
          "ClientCredentialClients"
        ],
        "summary": "Create a Client Credential Client. A Client Id and Client Secret will be generated to perform\nauthentication. Make sure to store the Secret somewhere safe as we do not store the\nactual value after the creation step. If you do not have access to the Secret value, we suggest\ndeleting the Secret and adding a new one for this Client. Clients have unique Ids in a Tenant.\nCurrently there is a limit of 50000 clients (of all types) per Tenant.",
        "operationId": "ClientCredentialClients_CreateClientCredentialClient",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "clientCredentialClientCreate",
          "description": "ClientCredentialClientCreate object.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ClientCredentialClientCreate"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Client Credential Client details for Client Credential Client created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientCredentialClientCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid inputs, or Client limit exceeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Operation timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Client Id already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "ClientCredentialClients"
        ],
        "summary": "Get a list of Client Credential clients from a Tenant.\nOptionally, get a list of requested clients. Total number\nof clients in the Tenant set in the Total-Count header.",
        "operationId": "ClientCredentialClients_GetClientCredentialClients",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Unordered list of Client Credential Client Ids. Empty, whitespace or null Ids will be ignored.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 2
          },
          {
            "name": "tag",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Only return Clients that have these tags.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 3
          },
          {
            "name": "query",
            "in": "query",
            "description": "Query to execute. Currently not supported.",
            "schema": {
              "type": "string",
              "default": "",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of clients to skip. Will be ignored if a list of Ids is passed.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 5
          },
          {
            "name": "count",
            "in": "query",
            "description": "Maximum number of clients to return. Will be ignored if a list of Ids is passed.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "description": "Client Credential Clients found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClientCredentialClient"
                  }
                }
              }
            }
          },
          "207": {
            "description": "Client Credential Clients found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientCredentialClientMultiStatusResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "ClientCredentialClients"
        ],
        "summary": "Return total number of Client Credential clients in a Tenant.\nOptionally, check based on a list of requested clients. The\nvalue will be set in the Total-Count header. This endpoint\nis identical to the GET one but it does not return any objects\nin the body.",
        "operationId": "ClientCredentialClients_GetClientCredentialClientsHeader",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Unordered list of Client Credential Client Ids. Empty, whitespace or null Ids will be ignored.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 2
          },
          {
            "name": "tag",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Only count Clients that have these tags.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Client Credential Client Headers found."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Client or Tenant not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/Tenants/{tenantId}/ClientCredentialClients/{clientId}": {
      "put": {
        "tags": [
          "ClientCredentialClients"
        ],
        "summary": "Update a Client Credential Client. It can take up to one hour\nfor these values to manifest in the authentication process.",
        "operationId": "ClientCredentialClients_UpdateClientCredentialClient",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "description": "Id of Client.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "updatedClientCredentialClient",
          "description": "ClientCredentialClient object. Properties that are not set or are null will not be changed.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ClientCredentialClient"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Client Credential Client updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientCredentialClient"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid inputs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Client or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Operation timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "ClientCredentialClients"
        ],
        "summary": "Get a Client Credential Client.",
        "operationId": "ClientCredentialClients_GetClientCredentialClient",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "description": "Id of Client.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Client Credential Client specified.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientCredentialClient"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Client or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ClientCredentialClients"
        ],
        "summary": "Delete a Client Credential Client. It can take up to one hour\nfor deletion to manifest in the authentication process. Access\ntokens issued to this Client will be valid until their expiration.",
        "operationId": "ClientCredentialClients_DeleteClientCredentialClient",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "description": "Id of Client.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Client or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Operation timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "ClientCredentialClients"
        ],
        "summary": "Validate that a Client Credential Client exists.\nThis endpoint is identical to the GET one but\nit does not return any objects in the body.",
        "operationId": "ClientCredentialClients_GetClientCredentialClientHeader",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "description": "Id of Client.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Header for specified Client Credential Client."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Client or Tenant not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/Tenants/{tenantId}/ClientCredentialClients/{clientId}/Secrets": {
      "get": {
        "tags": [
          "Secrets"
        ],
        "summary": "Get all secrets for a Client Credential Client.\nTotal number of secrets in the Client set in the\nTotal-Count header.",
        "operationId": "Secrets_GetClientCredentialClientSecrets",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "description": "Id of Client.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "query",
            "in": "query",
            "description": "Query to execute. Currently not supported.",
            "schema": {
              "type": "string",
              "default": "",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of clients to skip. From query.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 4
          },
          {
            "name": "count",
            "in": "query",
            "description": "Maximum number of clients to return.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "Client Credential Secret information found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClientSecret"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Client or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Secrets"
        ],
        "summary": "Add a new Secret to a Client Credential Client.\nA Client can have a maximum of 10 secrets.\nWe advise against creating secrets that do not expire.",
        "operationId": "Secrets_AddClientCredentialClientSecret",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "description": "Id of Client.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "clientSecretCreateOrUpdate",
          "description": "ClientSecretCreateOrUpdate object.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ClientSecretCreateOrUpdate"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "201": {
            "description": "Client Credential Client Secret updated information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientSecretResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid inputs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Client or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Operation timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "Secrets"
        ],
        "summary": "Return total number of Secrets in a Client. The value\nwill be set in the Total-Count header. This endpoint\nis identical to the GET one but it does not return\nany objects in the body.",
        "operationId": "Secrets_GetClientCredentialClientSecretsHeader",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "description": "Id of Client.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Client Credential Client Secret header information."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Client or Tenant not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/Tenants/{tenantId}/ClientCredentialClients/{clientId}/Secrets/{secretId}": {
      "get": {
        "tags": [
          "Secrets"
        ],
        "summary": "Get a Client Credential Client Secret.",
        "operationId": "Secrets_GetClientCredentialClientSecret",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "description": "Id of Client.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "secretId",
            "in": "path",
            "required": true,
            "description": "Id of Secret.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Client Credential Client Secret information specified.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientSecret"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Secret, Client, or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Secrets"
        ],
        "summary": "Update a Client Credential Client Secret.\nIt can take up to one hour for the update\nto manifest in the authentication process.",
        "operationId": "Secrets_UpdateClientCredentialClientSecret",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "description": "Id of Client.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "secretId",
            "in": "path",
            "required": true,
            "description": "Id of Secret.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "clientSecretCreateOrUpdate",
          "description": "ClientSecretCreateOrUpdate object. Properties that are not set or are null will not be changed.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ClientSecretCreateOrUpdate"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 4
        },
        "responses": {
          "200": {
            "description": "Updated Client Credential Client Secret information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientSecret"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid inputs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Secret, Client, or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Operation timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Secrets"
        ],
        "summary": "Delete a Secret from a Client Credential Client.\nIt can take up to one hour for deletion to manifest\nin the authentication process. Access tokens issued\nusing this Secret will be valid until their expiration.",
        "operationId": "Secrets_DeleteClientCredentialClientSecret",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "description": "Id of Client.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "secretId",
            "in": "path",
            "required": true,
            "description": "Id of Secret.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Secret, Client, or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Operation timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "Secrets"
        ],
        "summary": "Validate that a Secret with given Id exists in the Client.\nThis endpoint is identical to the GET one but it does not\nreturn any objects in the body.",
        "operationId": "Secrets_GetClientCredentialClientSecretHeader",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "description": "Id of Client.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "secretId",
            "in": "path",
            "required": true,
            "description": "Id of Secret.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Header for specified Client Credential Client Secret."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Secret, Client, or Tenant not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/Tenants/{tenantId}/DeviceCodeClients": {
      "post": {
        "tags": [
          "DeviceCodeClients"
        ],
        "summary": "Create an Device Code flow Client. No Secret will be generated for this Client.",
        "operationId": "DeviceCodeClients_CreateDeviceCodeClient",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "deviceCodeClientCreate",
          "description": "New DeviceCodeClient object.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/DeviceCodeClient"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Device Code Client created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceCodeClient"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid inputs, or Client limit exceeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Operation timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Client Id already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "DeviceCodeClients"
        ],
        "summary": "Get all Device Code clients from a Tenant.\nOptionally, get a list of requested clients. Total number\nof clients in the Tenant set in the Total-Count header.",
        "operationId": "DeviceCodeClients_GetDeviceCodeClients",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Unordered list of ids for all clients to get. Empty or whitespace Ids will be ignored.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 2
          },
          {
            "name": "tag",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Only return Clients that have these tags.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 3
          },
          {
            "name": "query",
            "in": "query",
            "description": "Query to execute. Currently not supported.",
            "schema": {
              "type": "string",
              "default": "",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of clients to skip. From query.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 5
          },
          {
            "name": "count",
            "in": "query",
            "description": "Maximum number of clients to return.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "description": "Device Code Clients found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceCodeClient"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "DeviceCodeClients"
        ],
        "summary": "Return total number of Device Code clients in a Tenant.\nOptionally, check based on a list of requested clients. The\nvalue will be set in the Total-Count header. This endpoint\nis identical to the GET one but it does not return any objects\nin the body.",
        "operationId": "DeviceCodeClients_GetDeviceCodeClientsHeader",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Unordered list of ids for all clients to get. Empty or whitespace Ids will be ignored.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 2
          },
          {
            "name": "tag",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Only count Clients that have these tags.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Device Code Client headers."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Client or Tenant not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/Tenants/{tenantId}/DeviceCodeClients/{clientId}": {
      "put": {
        "tags": [
          "DeviceCodeClients"
        ],
        "summary": "Update an Device Code Client. It can take up to one hour\nfor update to manifest in the authentication process.",
        "operationId": "DeviceCodeClients_UpdateDeviceCodeClient",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "description": "Id of Client.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "deviceCodeClientUpdate",
          "description": "Updated Device Code Client values. Properties that are not set or are null will not be changed.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/DeviceCodeClient"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Device Code Client updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceCodeClient"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid inputs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Client or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Operation timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "DeviceCodeClients"
        ],
        "summary": "Get an Device Code Client from Tenant.",
        "operationId": "DeviceCodeClients_GetDeviceCodeClient",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "description": "Id of Client.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Device Code Client specified.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceCodeClient"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Client or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DeviceCodeClients"
        ],
        "summary": "Delete a Device Code Client. It can take up to one hour\nfor deletion to manifest in the authentication process. Access\ntokens issued to this client will be valid until their expiration.",
        "operationId": "DeviceCodeClients_DeleteDeviceCodeClient",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "description": "Id of Client.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Client or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Operation timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "DeviceCodeClients"
        ],
        "summary": "Validate that an Device Code Client exists in Tenant.",
        "operationId": "DeviceCodeClients_GetDeviceCodeClientHeader",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "description": "Id of Client.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Header for specified Device Code Client.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientCredentialClient"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Client or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Tenants/{tenantId}/HybridClients": {
      "post": {
        "tags": [
          "HybridClients"
        ],
        "summary": "Create a Hybrid Client. A Client Id and Client Secret will be generated to perform\nauthentication. Make sure to store the Secret somewhere safe as we do not store the\nactual value after the creation step. If you do not have access to the Secret value, we suggest\ndeleting the Secret and adding a new one for this Client. Clients have unique ids in a Tenant.\nCurrently there is a limit of 50000 clients (of all types) per Tenant.",
        "operationId": "HybridClients_CreateHybridClient",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "hybridClientCreate",
          "description": "HybridClientCreate object.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/HybridClientCreate"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Hybrid Client created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HybridClientCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid inputs, or Client limit exceeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Operation timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Client Id already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "HybridClients"
        ],
        "summary": "Get a list of Hybrid clients from a Tenant.\nOptionally, get a list of requested clients. Total number\nof clients in the Tenant set in the Total-Count header.",
        "operationId": "HybridClients_GetHybridClients",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Unordered list of Hybrid Client Ids. Empty, whitespace or null Ids will be ignored.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 2
          },
          {
            "name": "tag",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Only return Clients that have these tags.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 3
          },
          {
            "name": "query",
            "in": "query",
            "description": "Query to execute. Currently not supported.",
            "schema": {
              "type": "string",
              "default": "",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of clients to skip. Will be ignored if a list of Ids is passed.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 5
          },
          {
            "name": "count",
            "in": "query",
            "description": "Maximum number of clients to return. Will be ignored if a list of Ids is passed.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "description": "Hybrid Clients found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HybridClient"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "HybridClients"
        ],
        "summary": "Return total number of Hybrid clients in a Tenant.\nOptionally, check based on a list of requested clients. The\nvalue will be set in the Total-Count header. This endpoint\nis identical to the GET one but it does not return any objects\nin the body.",
        "operationId": "HybridClients_GetHybridClientsHeader",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Unordered list of Hybrid Client Ids. Empty, whitespace or null Ids will be ignored.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 2
          },
          {
            "name": "tag",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Only count clients that have these tags.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Hybrid Client Secrets found."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Client or Tenant not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/Tenants/{tenantId}/HybridClients/{clientId}": {
      "put": {
        "tags": [
          "HybridClients"
        ],
        "summary": "Update a Hybrid Client. It can take up to one hour\nfor these values to manifest in the authentication process.",
        "operationId": "HybridClients_UpdateHybridClient",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "description": "Id of Client.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "hybridClient",
          "description": "HybridClient object. Properties that are not set or are null will not be changed.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/HybridClient"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Hybrid Client updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HybridClient"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid inputs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Client or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Operation timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "HybridClients"
        ],
        "summary": "Get a Hybrid Client from a Tenant.",
        "operationId": "HybridClients_GetHybridClient",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "description": "Id of Client.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Hybrid Client specified.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HybridClient"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Client or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "HybridClients"
        ],
        "summary": "Delete a Hybrid Client. It can take up to one hour\nfor deletion to manifest in the authentication process. Access\ntokens issued to this Client will be valid until their expiration.\nRefresh tokens issued to this will be valid up to one hour after deletion.",
        "operationId": "HybridClients_DeleteHybridClient",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "description": "Id of Client.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Client or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Operation timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "HybridClients"
        ],
        "summary": "Validate that a Hybrid Client exists.\nThis endpoint is identical to the GET one but\nit does not return any objects in the body.",
        "operationId": "HybridClients_GetHybridClientHeader",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "description": "Id of Client.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Header for specified Hybrid Client."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Client or Tenant not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/Tenants/{tenantId}/HybridClients/{clientId}/Secrets": {
      "get": {
        "tags": [
          "Secrets"
        ],
        "summary": "Get all secrets for a Hybrid Client.\nTotal number of secrets in the Client\nset in the Total-Count header.",
        "operationId": "Secrets_GetHybridClientSecrets",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "description": "Id of Client.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "query",
            "in": "query",
            "description": "Query to execute. Currently not supported.",
            "schema": {
              "type": "string",
              "default": "",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of clients to skip.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 4
          },
          {
            "name": "count",
            "in": "query",
            "description": "Maximum number of clients to return.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "Hybrid Client Secret information found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClientSecret"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Client or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Secrets"
        ],
        "summary": "Add a new secret to a Client Credential Client.\nA client can have a maximum of 10 secrets.\nWe advise against creating secrets that do not expire.",
        "operationId": "Secrets_AddHybridClientSecret",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "description": "Id of Client.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "clientSecretCreateOrUpdate",
          "description": "ClientSecretCreateOrUpdate object.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ClientSecretCreateOrUpdate"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "201": {
            "description": "Hybrid Client Secret created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientSecretResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Client or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Operation timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "Secrets"
        ],
        "summary": "Return total number of Secrets in a Hybrid Client. The value\nwill be set in the Total-Count header. This endpoint\nis identical to the GET one but it does not return\nany objects in the body.",
        "operationId": "Secrets_GetHybridClientSecretsHeader",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "description": "Id of Client.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Hybrid Client Secret headers."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Client or Tenant not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/Tenants/{tenantId}/HybridClients/{clientId}/Secrets/{secretId}": {
      "get": {
        "tags": [
          "Secrets"
        ],
        "summary": "Get a Hybrid Client Secret.",
        "operationId": "Secrets_GetHybridClientSecret",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "description": "Id of Client.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "secretId",
            "in": "path",
            "required": true,
            "description": "Id of Secret.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Hybrid Client Secret specified.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientSecret"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Secret, Client, or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Secrets"
        ],
        "summary": "Update a Hybrid Client Secret. It can take up to one hour for\nthe update to manifest in the authentication process.",
        "operationId": "Secrets_UpdateHybridClientSecret",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "description": "Id of Client.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "secretId",
            "in": "path",
            "required": true,
            "description": "Id of Secret.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "clientSecretCreateOrUpdate",
          "description": "ClientSecretCreateOrUpdate object. Properties that are not set or are null will not be changed.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ClientSecretCreateOrUpdate"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 4
        },
        "responses": {
          "200": {
            "description": "Hybrid Client Secret updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientSecret"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid inputs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Secret, Client, or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Operation timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Secrets"
        ],
        "summary": "Delete a Secret from a Hybrid Client. It can take up to one hour for\ndeletion to manifest in the authentication process.\nAccess tokens issued using this Secret will be valid until their expiration.",
        "operationId": "Secrets_DeleteHybridClientSecret",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "description": "Id of Client.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "secretId",
            "in": "path",
            "required": true,
            "description": "Id of Secret.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Secret, Client, or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Operation timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "Secrets"
        ],
        "summary": "Validate that a Secret with given Id exists in the Client.\nThis endpoint is identical to the GET one but it does not\nreturn any objects in the body.",
        "operationId": "Secrets_GetHybridClientSecretHeader",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "description": "Id of Client.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "secretId",
            "in": "path",
            "required": true,
            "description": "Id of Secret.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Header for Hybrid Client Secret."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Secret, Client, or Tenant not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/Tenants/{tenantId}/IdentityProviders/{identityProviderId}/Claims": {
      "get": {
        "tags": [
          "Claims"
        ],
        "summary": "Get all Identity Provider Claims for an Identity Provider on a Tenant.",
        "operationId": "Claims_GetIdentityProviderClaims",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "identityProviderId",
            "in": "path",
            "required": true,
            "description": "Id of Identity Provider.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          },
          {
            "name": "query",
            "in": "query",
            "description": "Query to execute. Currently not supported.",
            "schema": {
              "type": "string",
              "default": "",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of Identity Providers to skip.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 4
          },
          {
            "name": "count",
            "in": "query",
            "description": "Maximum number of Identity Providers to return.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "List of Identity Provider Claims found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentityProviderClaim"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Tenant or Identity Provider not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "Claims"
        ],
        "summary": "Get Header for all Identity Provider Claims for an Identity Provider on a Tenant.",
        "operationId": "Claims_GetIdentityProviderClaimsHeader",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "identityProviderId",
            "in": "path",
            "required": true,
            "description": "Id of Identity Provider.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Identity Provider Claim Header information."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Tenant or Identity Provider not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "post": {
        "tags": [
          "Claims"
        ],
        "summary": "Create a new Identity Provider Claim for an Identity Provider on a Tenant.",
        "operationId": "Claims_PostIdentityProviderClaim",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "identityProviderId",
            "in": "path",
            "required": true,
            "description": "Id of Identity Provider.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "identityProviderClaimCreate",
          "description": "Identity Provider Claim to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/IdentityProviderClaimCreate"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "201": {
            "description": "Identity Provider Claim created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProviderClaim"
                }
              }
            }
          },
          "302": {
            "description": "Found."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Tenant, Identity Provider, or Roles not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Operation timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Identity Provider Claim configuration already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Tenants/{tenantId}/IdentityProviders/{identityProviderId}/Claims/{identityProviderClaimId}": {
      "get": {
        "tags": [
          "Claims"
        ],
        "summary": "Get an Identity Provider Claim from an Identity Provider on a Tenant.",
        "operationId": "Claims_GetIdentityProviderClaim",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "identityProviderId",
            "in": "path",
            "required": true,
            "description": "Id of Identity Provider.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          },
          {
            "name": "identityProviderClaimId",
            "in": "path",
            "required": true,
            "description": "Id of Identity Provider Claim.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Identity Provider Claim specified.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProviderClaim"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Tenant, Identity Provider, or Identity Provider Claim not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "Claims"
        ],
        "summary": "Get an Identity Provider Claim Header from an Identity Provider on a Tenant.",
        "operationId": "Claims_GetIdentityProviderClaimHeader",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "identityProviderId",
            "in": "path",
            "required": true,
            "description": "Id of Identity Provider.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          },
          {
            "name": "identityProviderClaimId",
            "in": "path",
            "required": true,
            "description": "Id of Identity Provider Claim.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Identity Provider Claim specified header."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Tenant, Identity Provider, or Identity Provider Claim not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "put": {
        "tags": [
          "Claims"
        ],
        "summary": "Create a new Identity Provider Claim for an Identity Provider on a Tenant.",
        "operationId": "Claims_PutIdentityProviderClaim",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "identityProviderId",
            "in": "path",
            "required": true,
            "description": "Id of Identity Provider.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          },
          {
            "name": "identityProviderClaimId",
            "in": "path",
            "required": true,
            "description": "Id of Identity Provider Claim.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "identityProviderClaimUpdate",
          "description": "Updated Identity Provider Claim values.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/IdentityProviderClaimUpdate"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 4
        },
        "responses": {
          "200": {
            "description": "Updated Identity Provider Claim.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProviderClaim"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Tenant, Identity Provider, Identity Provider Claim, or Roles not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Operation timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Identity Provider Claim configuration already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Claims"
        ],
        "summary": "Delete an Identity Provider Claim for an Identity Provider on a Tenant.",
        "operationId": "Claims_DeleteIdentityProviderClaim",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "identityProviderId",
            "in": "path",
            "required": true,
            "description": "Id of Identity Provider.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          },
          {
            "name": "identityProviderClaimId",
            "in": "path",
            "required": true,
            "description": "Id of Identity Provider Claim.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Tenant, Identity Provider, or Identity Provider Claim not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Operation timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Tenants/{tenantId}/IdentityProviders": {
      "get": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Get all Identity Providers from a Tenant.",
        "operationId": "IdentityProviders_GetTenantIdentityProviders",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "query",
            "in": "query",
            "description": "Query to execute. Currently not supported.",
            "schema": {
              "type": "string",
              "default": "",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of Identity Providers to skip.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 3
          },
          {
            "name": "count",
            "in": "query",
            "description": "Maximum number of Identity Providers to return.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Identity Providers found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentityProvider"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Add an existing Identity Provider to a Tenant. This Identity Provider\nwill be available in the Home Realm Discovery Page\nfor users to sign-in or sign-up.",
        "operationId": "IdentityProviders_AddTenantIdentityProvider",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "identityProviderAdd",
          "description": "IdentityProviderAdd object.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/IdentityProviderAdd"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Identity Provider created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProvider"
                }
              }
            }
          },
          "302": {
            "description": "Found."
          },
          "400": {
            "description": "Missing or invalid inputs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Operation timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Identity Provider already exists in Tenant.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Return total number of Identity Providers in a Tenant. The\nvalue will be set in the Total-Count header. This endpoint\nis identical to the GET one but it does not return any objects\nin the body.",
        "operationId": "IdentityProviders_GetTenantIdentityProvidersHeader",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Identity Provider headers for Tenant."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Tenant not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/Tenants/{tenantId}/IdentityProviders/{identityProviderId}": {
      "get": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Get an Identity Provider from a Tenant.",
        "operationId": "IdentityProviders_GetTenantIdentityProvider",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "identityProviderId",
            "in": "path",
            "required": true,
            "description": "Id of Identity Provider.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Identity Provider specified.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProvider"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "IdentityProvider or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Remove an Identity Provider from a Tenant. Users provisioned\nwith this Identity Provider will remain in the Tenant, but will\nnot be able to authenticate.\nAn administrator cannot remove the Identity Provider they are signed in with.",
        "operationId": "IdentityProviders_RemoveTenantIdentityProvider",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "identityProviderId",
            "in": "path",
            "required": true,
            "description": "Id of Identity Provider.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "IdentityProvider or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Operation timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Validate that a Identity Provider exists in the Tenant.\nThis endpoint is identical to the GET one but\nit does not return any objects in the body.",
        "operationId": "IdentityProviders_GetTenantIdentityProviderHeader",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "identityProviderId",
            "in": "path",
            "required": true,
            "description": "Id of Identity Provider.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Header for Identity Provider."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "IdentityProvider or Tenant not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/Tenants/{tenantId}/IdentityProviders/{identityProviderId}/Consent": {
      "get": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Get an Identity Provider Consent from a Tenant.",
        "operationId": "IdentityProviders_GetTenantIdentityProviderConsent",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "identityProviderId",
            "in": "path",
            "required": true,
            "description": "Id of Identity Provider.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Identity Provider Consent.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProviderConsent"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "IdentityProvider or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Update an Identity Provider consent related to Deeper Integration.",
        "operationId": "IdentityProviders_UpdateTenantIdentityProviderConsent",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "identityProviderId",
            "in": "path",
            "required": true,
            "description": "Id of Identity Provider.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "identityProviderConsent",
          "description": "Identity Provider Consent.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/IdentityProviderConsent"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Identity Provider Consent.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProviderConsent"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid inputs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Operation timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Get header for an Identity Provider to check if any additional consent data exists.",
        "operationId": "IdentityProviders_GetTenantIdentityProviderConsentHeader",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "identityProviderId",
            "in": "path",
            "required": true,
            "description": "Id of Identity Provider.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Ok if the Identity Provider Consent exists."
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "IdentityProvider or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Tenants/{tenantId}/IdentityProviders/{identityProviderId}/users": {
      "get": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Get the users based on the query parameters.\nCurrently, Azure Active Directory provider is the only provider that supports this endpoint.",
        "operationId": "IdentityProviders_GetIdentityProviderUsers",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Tenant Id.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "identityProviderId",
            "in": "path",
            "required": true,
            "description": "Identity Provider Id.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          },
          {
            "name": "query",
            "in": "query",
            "required": true,
            "description": "Start of user name or Email to search for.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "count",
            "in": "query",
            "description": "Sets the page size of results.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            },
            "x-position": 4
          },
          {
            "name": "skipToken",
            "in": "query",
            "description": "Retrieves the next page of results from result sets that span multiple pages.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "List of users found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProviderResultsOfIdentityProviderUser"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid inputs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Tenants/{tenantId}/IdentityProviders/{identityProviderId}/groups": {
      "get": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Get the groups based on the query parameters.\nCurrently, Azure Active Directory provider is the only provider that supports this endpoint.",
        "operationId": "IdentityProviders_GetIdentityProviderGroups",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Tenant Id.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "identityProviderId",
            "in": "path",
            "required": true,
            "description": "Identity Provider Id.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          },
          {
            "name": "query",
            "in": "query",
            "required": true,
            "description": "Start of user name or Email to search for.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "count",
            "in": "query",
            "description": "Sets the page size of results.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            },
            "x-position": 4
          },
          {
            "name": "skipToken",
            "in": "query",
            "description": "Retrieves the next page of results from result sets that span multiple pages.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "List of groups found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProviderResultsOfIdentityProviderGroup"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid inputs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Tenants/{tenantId}/IdentityProviders/{identityProviderId}/Users/{userId}/Groups": {
      "get": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Get the groups a user is a member of.\nCurrently, Azure Active Directory provider is the only provider that supports this endpoint.",
        "operationId": "IdentityProviders_GetIdentityProviderGroupsForUser",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Tenant Id.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "identityProviderId",
            "in": "path",
            "required": true,
            "description": "Identity Provider Id.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "Id of the user.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Indexes into a result set.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 4
          },
          {
            "name": "count",
            "in": "query",
            "description": "Sets the page size of results.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            },
            "x-position": 5
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "The maximum time to allow for searching groups before returning the groups.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 6
          },
          {
            "name": "skipToken",
            "in": "query",
            "description": "Retrieves the next page of results from result sets that span multiple pages.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 7
          }
        ],
        "responses": {
          "200": {
            "description": "List of groups user is a member of.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProviderResultsOfIdentityProviderGroup"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid inputs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Tenants/{tenantId}/IdentityProviders/{identityProviderId}/Groups": {
      "post": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Get the groups based on the Ids.\nCurrently, Azure Active Directory provider is the only provider that supports this endpoint.",
        "operationId": "IdentityProviders_GetIdentityProviderGroupsByIds",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Tenant Id.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "identityProviderId",
            "in": "path",
            "required": true,
            "description": "Identity Provider Id.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "groupIds",
          "description": "Group Id list.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "List of groups.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProviderResultsOfIdentityProviderGroup"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid inputs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Tenants/{tenantId}/IdentityProviders/{identityProviderId}/groups/{groupId}/members": {
      "get": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Get the members in a group.\nCurrently, Azure Active Directory provider is the only provider that supports this endpoint.",
        "operationId": "IdentityProviders_GetIdentityProviderMembersInAGroup",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Tenant Id.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "identityProviderId",
            "in": "path",
            "required": true,
            "description": "Identity Provider Id.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          },
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "description": "External Id of the group.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "count",
            "in": "query",
            "description": "Sets the page size of results.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            },
            "x-position": 4
          },
          {
            "name": "skipToken",
            "in": "query",
            "description": "Retrieves the next page of results from result sets that span multiple pages.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "List of members.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProviderMembers"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid inputs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Tenants/{tenantId}/ImplicitClients": {
      "post": {
        "tags": [
          "ImplicitClients"
        ],
        "summary": "Create an Implicit Client in a Tenant. No Secret will be generated for this\nClient.",
        "operationId": "ImplicitClients_CreateImplicitClient",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "implicitClient",
          "description": "New ImplicitClient object.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ImplicitClient"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Implicit Client created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImplicitClient"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid inputs, or Client limit exceeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Operation timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Client Id already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "get": {
        "tags": [
          "ImplicitClients"
        ],
        "summary": "Get all Implicit clients from a Tenant.\nOptionally, get a list of requested clients. Total number\nof clients in the Tenant set in the Total-Count header.",
        "operationId": "ImplicitClients_GetImplicitClients",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Unordered list of ids for all clients to get. Empty or whitespace Ids will be ignored.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 2
          },
          {
            "name": "tag",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Only return Clients that have these tags.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 3
          },
          {
            "name": "query",
            "in": "query",
            "description": "Query to execute. Currently not supported.",
            "schema": {
              "type": "string",
              "default": "",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of clients to skip. Will be ignored if a list of Ids is passed.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 5
          },
          {
            "name": "count",
            "in": "query",
            "description": "Maximum number of clients to return. Will be ignored if a list of Ids is passed.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "description": "Implicit Clients found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ImplicitClient"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "head": {
        "tags": [
          "ImplicitClients"
        ],
        "summary": "Return total number of Implicit clients in a Tenant.\nOptionally, check based on a list of requested clients. The\nvalue will be set in the Total-Count header. This endpoint\nis identical to the GET one but it does not return any objects\nin the body.",
        "operationId": "ImplicitClients_GetImplicitClientsHeader",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Unordered list of ids for all clients to get. Empty or whitespace Ids will be ignored.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 2
          },
          {
            "name": "tag",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Only count Clients that have these tags.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Implicit Client headers found on Tenant."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Client or Tenant not found."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "deprecated": true
      }
    },
    "/api/Tenants/{tenantId}/ImplicitClients/{clientId}": {
      "put": {
        "tags": [
          "ImplicitClients"
        ],
        "summary": "Update an Implicit Client. It can take up to one hour\nfor update to manifest in the authentication process.",
        "operationId": "ImplicitClients_UpdateImplicitClient",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "description": "Id of Client.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "implicitClient",
          "description": "Updated Implicit Client values. Properties that are not set or are null will not be changed.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ImplicitClient"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Implicit Client updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImplicitClient"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid inputs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Client or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Operation timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "get": {
        "tags": [
          "ImplicitClients"
        ],
        "summary": "Get an Implicit Client from a Tenant.",
        "operationId": "ImplicitClients_GetImplicitClient",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "description": "Id of Client.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Implicit Client specified.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImplicitClient"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Client or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "delete": {
        "tags": [
          "ImplicitClients"
        ],
        "summary": "Delete an Implicit Client. It can take up to one hour\nfor deletion to manifest in the authentication process. Access\ntokens issued to this client will be valid until their expiration.",
        "operationId": "ImplicitClients_DeleteImplicitClient",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "description": "Id of Client.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Client or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Operation timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "head": {
        "tags": [
          "ImplicitClients"
        ],
        "summary": "Validate that an Implicit Client exists.",
        "operationId": "ImplicitClients_GetImplicitClientHeader",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "description": "Id of client.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Header for Implicit Client."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Client or Tenant not found."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "deprecated": true
      }
    },
    "/api/Tenants/{tenantId}/Roles": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get all Roles for a Tenant.",
        "operationId": "Roles_GetTenantRoles",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "query",
            "in": "query",
            "description": "Query to execute. Currently not supported.",
            "schema": {
              "type": "string",
              "default": "",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of providers to skip.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 3
          },
          {
            "name": "count",
            "in": "query",
            "description": "Max number of providers to return.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "List of Roles found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "Roles"
        ],
        "summary": "Get header for Roles to get the total number of Roles for a given tenant.",
        "operationId": "Roles_GetTenantRolesHeader",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Tenant Id.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Headers for Roles found."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Tenant not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "post": {
        "tags": [
          "Roles"
        ],
        "summary": "Create a new Role for a Tenant. ",
        "operationId": "Roles_PostTenantRole",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Tenant ID.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "role",
          "description": "Role to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Role"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "Role created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "302": {
            "description": "A role with the same Id or Name already exists in the Tenant."
          },
          "400": {
            "description": "Missing or invalid inputs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Tenant or Role not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Operation timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "A role with some matching values already exists in Tenant.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Tenants/{tenantId}/Roles/{roleId}/users": {
      "head": {
        "tags": [
          "Roles"
        ],
        "summary": "Gets the total number of users for a given role.",
        "operationId": "Roles_GetUsersCountForARole",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Tenant Id for the Role.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "description": "Role Id.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Headers for Roles found."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Tenant or Role not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get all the Users for a given role.",
        "operationId": "Roles_GetUsersForARole",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Tenant Id.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "description": "Role Id.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Users for a given role."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Tenant or Role not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/Tenants/{tenantId}/Roles/{roleId}/clientcredentialclients": {
      "head": {
        "tags": [
          "Roles"
        ],
        "summary": "Get the total number of clients for a given role.",
        "operationId": "Roles_GetClientCredentialClientsCountForARole",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Tenant Id.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "description": "Role Id.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Headers for the total number of clients for a given role."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Tenant or Role not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get all the clients for a given role.",
        "operationId": "Roles_GetClientCredentialClientsForARole",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Tenant Id.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "description": "Role Id.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Clients for a given role."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Tenant or Role not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/Tenants/{tenantId}/Roles/{roleId}": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Returns the specified Role.",
        "operationId": "Roles_GetTenantRole",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Tenant Id.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "description": "Role Id.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Role specified.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Role or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "Roles"
        ],
        "summary": "Get header for a Role on given tenant.",
        "operationId": "Roles_GetTenantRoleHeader",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "description": "Id of provider.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Header for Role specified."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "IdentityProvider or Tenant not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "put": {
        "tags": [
          "Roles"
        ],
        "summary": "Update a Role for a Tenant.",
        "operationId": "Roles_PutTenantRole",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Tenant ID.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "description": "Role ID.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "role",
          "description": "Role to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Role"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Updated Role.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid inputs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Tenant or Role not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Operation timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Roles"
        ],
        "summary": "Delete a Role from a Tenant.",
        "operationId": "Roles_DeleteTenantRole",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Tenant ID.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "description": "Role ID.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "IdentityProvider or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Delete built-in Roles not allowed. ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Operation timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Tenants/{tenantId}/Users/{userId}/Roles": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Returns a list of Roles for a given User.",
        "operationId": "Roles_GetUserRoles",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Tenant ID.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "User ID.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          },
          {
            "name": "query",
            "in": "query",
            "description": "Query to execute. Currently not supported.",
            "schema": {
              "type": "string",
              "default": "",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of Roles to skip.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 4
          },
          {
            "name": "count",
            "in": "query",
            "description": "Max number of Roles to return.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "List of Roles found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid inputs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Tenant or User not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "Roles"
        ],
        "summary": "Head request to get the total number of User Roles for the specified User.",
        "operationId": "Roles_GetUserRolesHeader",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Tenant ID.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "User ID.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Headers for Roles found."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Tenant or User not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "put": {
        "tags": [
          "Roles"
        ],
        "summary": "Replace existing User Roles. If Member Role is not provided it will be added.",
        "operationId": "Roles_PutUserRoles",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Tenant ID.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "User ID.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "roles",
          "description": "Update Roles list.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "No content.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing preferences.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Operation timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Tenants/{tenantId}/Users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a list of users from a Tenant. Optionally, get a list of requested users.\nTotal number of users in the Tenant set in the Total-Count header.",
        "operationId": "Users_GetUsers",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Unordered list of User Ids to get.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string",
                "format": "guid"
              }
            },
            "x-position": 2
          },
          {
            "name": "query",
            "in": "query",
            "description": "Query to execute. Currently not supported.",
            "schema": {
              "type": "string",
              "default": "",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of users to skip. Ignored if a list of Ids is passed.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 4
          },
          {
            "name": "count",
            "in": "query",
            "description": "Maximum number of users to return. Ignored if a list of Ids is passed.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "List of Users found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "207": {
            "description": "List of Users found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserMultiStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid inputs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a User in the Tenant. This endpoint does not create an invitation for the User.\nYou will need to create an invitation in the respective endpoint for this User, otherwise\nthey will not be able to finish the sign-up process. Users have unique Ids in a Tenant.\nCurrently there is a limit of 50000 users per Tenant.\nFor Windows Active Directory users, the externalUserId must be specified.",
        "operationId": "Users_CreateUser",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "userCreateOrUpdate",
          "description": "UserCreateOrUpdate object.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/UserCreateOrUpdate"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "User created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid inputs, or the User limit exceeded for Tenant.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Operation timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "Users"
        ],
        "summary": "Return total number of users in a Tenant. Optionally, check based on a list of requested users.\nThe value will be set in the Total-Count header. This endpoint is identical to the GET one but\nit does not return any objects in the body.",
        "operationId": "Users_GetUsersHeader",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Unordered list of User Ids.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string",
                "format": "guid"
              }
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "User Header found."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "User not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/Tenants/{tenantId}/Users/Status": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get invitation statuses for multiple users. Optionally\nrestrict it only to users of a specific invitation status.\nThe User status can be: InvitationAccepted (0),  NoInvitation (1),\nInvitationNotSent (2), InvitationSent (3), InvitationExpired (4).",
        "operationId": "Users_GetUsersStatus",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Unordered list of User Ids to get.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string",
                "format": "guid"
              }
            },
            "x-position": 2
          },
          {
            "name": "query",
            "in": "query",
            "description": "Query to execute. Currently not supported.",
            "schema": {
              "type": "string",
              "default": "",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of users to skip. Ignored if a list of Ids is passed.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 4
          },
          {
            "name": "count",
            "in": "query",
            "description": "Maximum number of users to return. Ignored if a list of Ids is passed.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            },
            "x-position": 5
          },
          {
            "name": "status",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Only return statuses that match these values. Possible User statuses are: InvitationAccepted, NoInvitation, InvitationNotSent, InvitationSent, InvitationExpired.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "description": "List of User Statuses found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserStatus"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid inputs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Tenants/{tenantId}/Users/{userId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a User from Tenant.",
        "operationId": "Users_GetUserModel",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "Id of User.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "User specified.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update a User in a Tenant. The Id of a User cannot be changed.",
        "operationId": "Users_UpdateUser",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "Id of User.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "userCreateOrUpdate",
          "description": "UserCreateOrUpdate object. Properties that are not set or are null will not be changed.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/UserCreateOrUpdate"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Updated User.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid inputs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Operation timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a User. Users cannot delete themselves. Deleting a User does not invalidate any of the\nexisting access tokens, but it prevents this User from being able to authenticate in the future.\nExisting access tokens for the User will be valid until their expiration date. Refresh tokens on\nbehalf of the User will no longer be valid after the User has been deleted. Deleting a user with \nexplicit and claim role mappings will only have their explicit roles deleted. Forcibly deleting a user\nwill delete a user completely regardless of claim role mappings.",
        "operationId": "Users_DeleteUser",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "Id of User.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          },
          {
            "name": "force",
            "in": "query",
            "description": "Forcibly delete a User that can remain due to claim role mappings.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "No content.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "204": {
            "description": "No content."
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Operation timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "Users"
        ],
        "summary": "Validate that a User exists. This endpoint is identical to the GET\none, but it does not return an object in the body.",
        "operationId": "Users_GetUserHeader",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "Id of User.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Header for User."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "User does not exist."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/Tenants/{tenantId}/Users/{userId}/Status": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get invitation status for a User. It can be: InvitationAccepted (0),\nNoInvitation (1), InvitationNotSent (2), InvitationSent (3), InvitationExpired (4).",
        "operationId": "Users_GetUserStatus",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "Id of User.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "User Status for User specified.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Tenants/{tenantId}/Users/{userId}/Preferences": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get preferences from a User. User preferences can be any valid\nJSON object. A common use case is to store UI preferences for the User.",
        "operationId": "Users_GetUserPreferences",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "Id of User.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "User Preferences for specified User.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update preferences for a User.",
        "operationId": "Users_UpdateUserPreferences",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "Id of User.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "preferences",
          "description": "JSON object preferences.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Updated User Preferences.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Missing preferences.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Operation timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "Users"
        ],
        "summary": "Validate that there are preferences for a User. This endpoint is identical\nto the GET one but it does not return any objects in the body.",
        "operationId": "Users_GetUserPreferencesHeader",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "Id of User.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Header for specified User's Preferences."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "User or Tenant not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/Doc": {
      "get": {
        "tags": [
          "Doc"
        ],
        "operationId": "Doc_GetApiDoc",
        "responses": {
          "200": {
            "description": "Doc",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "IdentityProviderClaimTypeName": {
        "type": "object",
        "description": "Claim Type Name associated with an Identity Provider.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Gets or sets the ID for this Claim Type Name.",
            "format": "guid"
          },
          "TypeName": {
            "type": "string",
            "description": "Gets or sets the Claim Type Name.",
            "nullable": true
          },
          "IdentityProviderId": {
            "type": "string",
            "description": "Gets or sets the Identity Provider Id associated with this Claim Type Name.",
            "format": "guid"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "description": "Object returned whenever there is an error.",
        "additionalProperties": {
          "nullable": true
        },
        "required": [
          "OperationId",
          "Error",
          "Reason",
          "Resolution"
        ],
        "properties": {
          "OperationId": {
            "type": "string",
            "description": "Gets or sets operationId of action that caused the Error.",
            "minLength": 1
          },
          "Error": {
            "type": "string",
            "description": "Gets or sets error description.",
            "minLength": 1
          },
          "Reason": {
            "type": "string",
            "description": "Gets or sets reason for the Error.",
            "minLength": 1
          },
          "Resolution": {
            "type": "string",
            "description": "Gets or sets what can be done to resolve the Error.",
            "minLength": 1
          }
        }
      },
      "IdentityProviderClaim": {
        "type": "object",
        "description": "Object representing a claim from an Identity Provider to map to a Role.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Gets or sets the IdentityProvider Claim Id.",
            "format": "guid"
          },
          "TypeName": {
            "type": "string",
            "description": "Gets or sets the Type Name for this IdentityProvider Claim.",
            "nullable": true
          },
          "Value": {
            "type": "string",
            "description": "Gets or sets the value for this IdentityProvider Claim.",
            "nullable": true
          },
          "RoleIds": {
            "type": "array",
            "description": "Gets or sets a list of RoleIds that this claim on this IdentityProvider will map to.",
            "nullable": true,
            "items": {
              "type": "string",
              "format": "guid"
            }
          }
        }
      },
      "IdentityProvider": {
        "type": "object",
        "description": "The model for an Identity Provider in Identity Storage.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Gets or sets id of an identity provider.",
            "format": "guid"
          },
          "DisplayName": {
            "type": "string",
            "description": "Gets or sets identity provider display name to use.",
            "nullable": true
          },
          "Scheme": {
            "type": "string",
            "description": "Gets or sets the name of the cookie handler that will temporarily store the outcome of the external authentication.",
            "nullable": true
          },
          "UserIdClaimType": {
            "type": "string",
            "description": "Gets or sets type of claim.",
            "nullable": true
          },
          "ClientId": {
            "type": "string",
            "description": "Gets or sets the ClientId of the identity provider.",
            "nullable": true
          },
          "IsConfigured": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the identity provider has been configured."
          },
          "Capabilities": {
            "description": "Gets or sets the Capabilities of the identity provider.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/IdentityProviderCapabilities"
              }
            ]
          }
        }
      },
      "IdentityProviderCapabilities": {
        "type": "object",
        "description": "The model for the Capabilities of an Identity Provider in Identity Storage.",
        "additionalProperties": false,
        "properties": {
          "User": {
            "description": "Gets or sets user level capabilities",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/IdentityProviderUserCapabilites"
              }
            ]
          },
          "Group": {
            "description": "Gets or sets group level capabilities",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/IdentityProviderGroupCapabilites"
              }
            ]
          }
        }
      },
      "IdentityProviderUserCapabilites": {
        "type": "object",
        "description": "The model for the user level capabilities of an Identity Provider in Identity Storage.",
        "additionalProperties": false,
        "properties": {
          "SignIn": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether user sign-in is supported."
          },
          "Invitation": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether authorization via the invitation flow is supported."
          },
          "Search": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether user search is supported."
          }
        }
      },
      "IdentityProviderGroupCapabilites": {
        "type": "object",
        "description": "The model for the group level capabilities of an Identity Provider in Identity Storage.",
        "additionalProperties": false,
        "properties": {
          "Authorize": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether authorization via groups is supported."
          },
          "Search": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether group search is supported."
          }
        }
      },
      "AuthorizationCodeClient": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WebClient"
          },
          {
            "type": "object",
            "description": "Object used during Authorization Code Client creation.",
            "additionalProperties": false,
            "properties": {
              "AllowedCorsOrigins": {
                "type": "array",
                "description": "Gets or sets the values used by the default CORS policy service implementations to build a\nCORS policy for JavaScript clients.",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "WebClient": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Client"
          },
          {
            "type": "object",
            "description": "Object used during Client creation.",
            "x-abstract": true,
            "additionalProperties": false,
            "properties": {
              "RedirectUris": {
                "type": "array",
                "description": "Gets or sets the allowed URIs to which return tokens or authorization codes can be returned.\nWildcards are ignored. URIs must match exactly what you are redirecting to\nafter login. If URIs do not match, the authentication process will fail\nwith a bad_client error.\nMaximum 10 per client.",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              },
              "PostLogoutRedirectUris": {
                "type": "array",
                "description": "Gets or sets allowed URIs to redirect to after logout. Wildcards are ignored.\nURIs must match exactly what you are redirecting to after logout.\nMaximum 10 for client.",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              },
              "ClientUri": {
                "type": "string",
                "description": "Gets or sets URI to a page with information about client (used on consent screen).",
                "nullable": true
              },
              "LogoUri": {
                "type": "string",
                "description": "Gets or sets URI to client logo (used on consent screen).",
                "nullable": true
              }
            }
          }
        ]
      },
      "Client": {
        "type": "object",
        "description": "Base object used during Client creation.",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Gets or sets client ID for this client. This ID should be a GUID.",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "description": "Gets or sets name of Client.",
            "nullable": true
          },
          "Enabled": {
            "type": "boolean",
            "description": "Gets or sets whether client is enabled. Client can be used for authentication\nif set to true. Client cannot be used for authentication if set to false.",
            "nullable": true
          },
          "AccessTokenLifetime": {
            "type": "integer",
            "description": "Gets or sets lifetime of access token issued for this client after authentication.\nMinimum 60 seconds. Maximum 3600 seconds. Defaults to 3600 seconds.",
            "format": "int32",
            "nullable": true
          },
          "Tags": {
            "type": "array",
            "description": "Gets or sets for OSIsoft internal use only.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ClientCredentialClient": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Client"
          },
          {
            "type": "object",
            "description": "Object to get or update a Client Credential Client.",
            "additionalProperties": false,
            "properties": {
              "RoleIds": {
                "type": "array",
                "description": "Gets or sets list of Roles to be assigned to this client. Member role is always required.\nFor security reasons we advise against assigning Admin roles to a client.",
                "nullable": true,
                "items": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          }
        ]
      },
      "AzureActiveDirectoryTenant": {
        "type": "object",
        "description": "The model for an Azure Active Directory Tenant in Identity Storage.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Gets or sets id of an Azure Active Directory Tenant.",
            "nullable": true
          },
          "ConsentState": {
            "description": "Gets or sets Consent State of Azure Active Directory Tenant. Can be: NotConsented (0), Consented (1).",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ConsentState"
              }
            ]
          },
          "Domain": {
            "type": "string",
            "description": "Gets or sets Domain of Azure Active Directory Tenant.",
            "nullable": true
          }
        }
      },
      "ConsentState": {
        "type": "integer",
        "description": "AAD Tenant Consent State.\n            ",
        "x-enumNames": [
          "NotConsented",
          "Consented"
        ],
        "enum": [
          0,
          1
        ]
      },
      "ConsentInformation": {
        "type": "object",
        "description": "Information about the recipient of the Azure Active Directory consent email.",
        "additionalProperties": false,
        "properties": {
          "AzureActiveDirectoryConsentEmail": {
            "type": "string",
            "description": "Gets or sets address to email consent.",
            "format": "email",
            "nullable": true
          },
          "AzureActiveDirectoryConsentGivenName": {
            "type": "string",
            "description": "Gets or sets preferred name to use in the consent email.",
            "nullable": true
          },
          "AzureActiveDirectoryConsentSurname": {
            "type": "string",
            "description": "Gets or sets preferred surname to use in the consent email.",
            "nullable": true
          },
          "AzureActiveDirectoryTenant": {
            "type": "string",
            "description": "Gets or sets Azure Active Directory Domain Name (e.g. mydomain.onmicrosoft.com).",
            "nullable": true
          },
          "AzureActiveDirectoryConsentTypes": {
            "type": "string",
            "description": "Gets or sets Azure Active Directory Consent Types.  \nValid Consent Type combinations include \"SignIn\" and \"SignIn;ReadAllUsersGroups\".",
            "nullable": true
          }
        }
      },
      "ClientCredentialClientCreateResponse": {
        "type": "object",
        "description": "Secret information returned after a Client Credential Client is created.",
        "additionalProperties": false,
        "properties": {
          "Secret": {
            "type": "string",
            "description": "Gets or sets client secret.",
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "description": "Gets or sets secret Id.",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Gets or sets description for the initial secret for the client.",
            "nullable": true
          },
          "ExpirationDate": {
            "type": "string",
            "description": "Gets or sets expiration date for the initial secret for the client.",
            "format": "date-time",
            "nullable": true
          },
          "Client": {
            "description": "Gets or sets client Client Credential Client created.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ClientCredentialClient"
              }
            ]
          }
        }
      },
      "ClientCredentialClientCreate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ClientCredentialClient"
          },
          {
            "type": "object",
            "description": "Object used during Client creation.",
            "additionalProperties": false,
            "properties": {
              "SecretDescription": {
                "type": "string",
                "description": "Gets or sets description for the initial secret for the client. Ensure that this is descriptive enough,\nas it will be the only way to distinguish between multiple secrets and their usage for a\nclient.",
                "nullable": true
              },
              "SecretExpirationDate": {
                "type": "string",
                "description": "Gets or sets expiration date for the initial secret for the client. If set to null the secret will\nnever expire. We advise against such practice.",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "ClientCredentialClientMultiStatusResponse": {
        "type": "object",
        "description": "MultiStatusResponse objects returned in a 207 response.",
        "additionalProperties": false,
        "properties": {
          "OperationId": {
            "type": "string",
            "description": "Gets or sets operationId that resulted in this error.",
            "nullable": true
          },
          "Error": {
            "type": "string",
            "description": "Gets or sets string message describing the error.",
            "nullable": true
          },
          "Reason": {
            "type": "string",
            "description": "Gets or sets reason that caused the error.",
            "nullable": true
          },
          "ChildErrors": {
            "type": "array",
            "description": "Gets or sets list of ChildErrors.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/MultiStatusResponseChildError"
            }
          },
          "Data": {
            "type": "array",
            "description": "Gets or sets data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ClientCredentialClient"
            }
          }
        }
      },
      "MultiStatusResponseChildError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorResponse"
          },
          {
            "type": "object",
            "description": "ChildError objects returned in a 207 response.",
            "additionalProperties": {
              "nullable": true
            },
            "properties": {
              "StatusCode": {
                "type": "integer",
                "description": "Gets or sets hTTP status code.",
                "format": "int32"
              },
              "ModelId": {
                "type": "string",
                "description": "Gets or sets model ID.",
                "nullable": true
              }
            }
          }
        ]
      },
      "ClientSecret": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ClientSecretCreateOrUpdate"
          },
          {
            "type": "object",
            "description": "Client Secret Object.",
            "additionalProperties": false,
            "properties": {
              "Id": {
                "type": "integer",
                "description": "Gets or sets id for this Secret.",
                "format": "int32"
              }
            }
          }
        ]
      },
      "ClientSecretCreateOrUpdate": {
        "type": "object",
        "description": "Object to write a Client Secret.",
        "additionalProperties": false,
        "properties": {
          "Expiration": {
            "type": "string",
            "description": "Gets or sets expiration date for the client secret. Will be null if the secret does not expire.",
            "format": "date-time",
            "nullable": true
          },
          "Expires": {
            "type": "boolean",
            "description": "Gets or sets determines if the secret expires. Defaults to true.\nIf Expires is set to true (or null) and Expiration is not null, expiration of this secret will be enforced.\nIf Expires is set to true (or null) and Expiration is null, a 400 error will be returned.\nIf Expires is set to false and Expiration is not null, a 400 error will be returned.\nIf Expires is set to false and Expiration is null, there will be no expiration of this secret.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "Gets or sets description for the client secret. We suggest being as descriptive as possible. This field will make identifying\nsecrets easier.",
            "nullable": true
          }
        }
      },
      "ClientSecretResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ClientSecret"
          },
          {
            "type": "object",
            "description": "Object returned after a Client Secret is created.",
            "additionalProperties": false,
            "properties": {
              "Secret": {
                "type": "string",
                "description": "Gets or sets client secret.",
                "nullable": true
              }
            }
          }
        ]
      },
      "DeviceCodeClient": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Client"
          },
          {
            "type": "object",
            "description": "Object used for Device Code Clients.",
            "additionalProperties": false,
            "properties": {
              "DeviceCodeLifetime": {
                "type": "integer",
                "description": "Gets or sets the lifetime of device codes in seconds.",
                "format": "int32",
                "nullable": true
              },
              "ClientUri": {
                "type": "string",
                "description": "Gets or sets URI to a page with information about client (used on consent screen).",
                "nullable": true
              },
              "LogoUri": {
                "type": "string",
                "description": "Gets or sets URI to client logo (used on consent screen).",
                "nullable": true
              }
            }
          }
        ]
      },
      "HybridClientCreateResponse": {
        "type": "object",
        "description": "Secret information returned after a Hybrid Client is created.",
        "additionalProperties": false,
        "properties": {
          "Secret": {
            "type": "string",
            "description": "Gets or sets client secret.",
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "description": "Gets or sets secret Id.",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Gets or sets description for the initial secret for the client.",
            "nullable": true
          },
          "ExpirationDate": {
            "type": "string",
            "description": "Gets or sets expiration date for the initial secret for the client.",
            "format": "date-time",
            "nullable": true
          },
          "Client": {
            "description": "Gets or sets Hybrid Client object created.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/HybridClient"
              }
            ]
          }
        }
      },
      "HybridClient": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WebClient"
          },
          {
            "type": "object",
            "description": "Object used for Hybrid Clients.",
            "additionalProperties": false,
            "properties": {
              "AllowOfflineAccess": {
                "type": "boolean",
                "description": "Gets or sets whether this client can request refresh tokens, by providing the *offline_access* scope.",
                "nullable": true
              },
              "AllowAccessTokensViaBrowser": {
                "type": "boolean",
                "description": "Gets or sets whether this HybridClient is allowed to receive access tokens via the browser.\nThis is useful to harden flows that allow multiple response types (e.g. by disallowing a hybrid flow\nclient that is supposed to use code *id_token* to add the *token* response type, thus\nleaking the token to the browser).",
                "nullable": true
              }
            }
          }
        ]
      },
      "HybridClientCreate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/HybridClient"
          },
          {
            "type": "object",
            "description": "Object used during Hybrid Client creation.",
            "additionalProperties": false,
            "properties": {
              "SecretDescription": {
                "type": "string",
                "description": "Gets or sets description for the initial secret for the client.",
                "nullable": true
              },
              "SecretExpirationDate": {
                "type": "string",
                "description": "Gets or sets expiration date for the initial secret for the client. If set to null the secret will\nnever expire. We advise against such practice.",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "IdentityProviderClaimCreate": {
        "type": "object",
        "description": "IdentityProvider Claim to Create.",
        "additionalProperties": false,
        "properties": {
          "Value": {
            "type": "string",
            "description": "Gets or sets the value for this IdentityProvider Claim.",
            "nullable": true
          },
          "IdentityProviderClaimTypeNameId": {
            "type": "string",
            "description": "Gets or sets the Identity Provider Claim Type Name Id for this IdentityProvider Claim.",
            "format": "guid"
          },
          "RoleIds": {
            "type": "array",
            "description": "Gets or sets the list of Role Ids associated with this IdentityProviderClaim.",
            "nullable": true,
            "items": {
              "type": "string",
              "format": "guid"
            }
          }
        }
      },
      "IdentityProviderClaimUpdate": {
        "type": "object",
        "description": "Update information for an IdentityProvider Claim.",
        "additionalProperties": false,
        "properties": {
          "Value": {
            "type": "string",
            "description": "Gets or sets the value for this IdentityProvider Claim.",
            "nullable": true
          },
          "RoleIds": {
            "type": "array",
            "description": "Gets or sets the list of Role Ids associated with this IdentityProviderClaim.",
            "nullable": true,
            "items": {
              "type": "string",
              "format": "guid"
            }
          }
        }
      },
      "IdentityProviderConsent": {
        "type": "object",
        "description": "The model for an Identity Provider Consent in Identity Storage.",
        "additionalProperties": {
          "nullable": true
        },
        "properties": {
          "Scheme": {
            "type": "string",
            "description": "Gets or sets the scheme of the Identity Provider.",
            "nullable": true
          }
        }
      },
      "IdentityProviderAdd": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ConsentInformation"
          },
          {
            "type": "object",
            "description": "Object for adding an Identity Provider.",
            "additionalProperties": false,
            "properties": {
              "IdentityProviderId": {
                "type": "string",
                "description": "Gets or sets Identity Provider Id to Add.",
                "format": "guid"
              },
              "AzureActiveDirectorySendConsent": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether send consent email for Azure Active Directory."
              }
            }
          }
        ]
      },
      "IdentityProviderResultsOfIdentityProviderUser": {
        "type": "object",
        "description": "Result object for Identity Provider access users/groups.",
        "additionalProperties": false,
        "properties": {
          "Results": {
            "type": "array",
            "description": "List of users/groups.",
            "items": {
              "$ref": "#/components/schemas/IdentityProviderUser"
            }
          },
          "SkipToken": {
            "type": "string",
            "description": "Skip token for paging.",
            "nullable": true
          }
        }
      },
      "IdentityProviderUser": {
        "type": "object",
        "description": "Base class for Identity provider access user.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Gets or sets Id of user."
          },
          "GivenName": {
            "type": "string",
            "description": "Gets or sets given name of user.",
            "nullable": true
          },
          "Surname": {
            "type": "string",
            "description": "Gets or sets surname of user.",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "description": "Gets or sets name of user.",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "description": "Gets or sets email of user.",
            "format": "email",
            "nullable": true
          }
        }
      },
      "IdentityProviderResultsOfIdentityProviderGroup": {
        "type": "object",
        "description": "Result object for Identity Provider access users/groups.",
        "additionalProperties": false,
        "properties": {
          "Results": {
            "type": "array",
            "description": "List of users/groups.",
            "items": {
              "$ref": "#/components/schemas/IdentityProviderGroup"
            }
          },
          "SkipToken": {
            "type": "string",
            "description": "Skip token for paging.",
            "nullable": true
          }
        }
      },
      "IdentityProviderGroup": {
        "type": "object",
        "description": "Base class for Identity Provider access group.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Gets or sets the Object Id of IdentityProviderGroup."
          },
          "Name": {
            "type": "string",
            "description": "Gets or sets group name of IdentityProviderGroup.",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "description": "Gets or sets the email address of the IdentityProviderGroup.",
            "format": "email",
            "nullable": true
          }
        }
      },
      "IdentityProviderMembers": {
        "type": "object",
        "description": "Class to hold members in a group.",
        "additionalProperties": false,
        "properties": {
          "Users": {
            "type": "array",
            "description": "List of users.",
            "items": {
              "$ref": "#/components/schemas/IdentityProviderUser"
            }
          },
          "Groups": {
            "type": "array",
            "description": "List of groups.",
            "items": {
              "$ref": "#/components/schemas/IdentityProviderGroup"
            }
          },
          "SkipToken": {
            "type": "string",
            "description": "Skip token for paging.",
            "nullable": true
          }
        }
      },
      "ImplicitClient": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WebClient"
          },
          {
            "type": "object",
            "description": "Object used during Implicit Client creation.",
            "additionalProperties": false,
            "properties": {
              "AllowedCorsOrigins": {
                "type": "array",
                "description": "Gets or sets the values used by the default CORS policy service implementations to build a\nCORS policy for JavaScript clients.\nMaximum 10 for client.",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "Role": {
        "type": "object",
        "description": "Identity representation of a Role.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Gets or sets unique identifier for this Role. Generated by the server upon Creation.",
            "format": "guid",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "description": "Gets or sets name of this Role. Can not be empty.",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "Gets or sets description of this Role.",
            "maxLength": 128,
            "minLength": 0,
            "nullable": true
          },
          "RoleScope": {
            "description": "Gets or sets scope of this Role.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/RoleScope"
              }
            ]
          },
          "TenantId": {
            "type": "string",
            "description": "Gets or sets unique identifier of Tenant for this Role, if this is a Account Role, null otherwise.",
            "format": "guid",
            "deprecated": true,
            "x-deprecatedMessage": "TenantId will be removed in the next release. Please remove references to it.",
            "nullable": true
          },
          "CommunityId": {
            "type": "string",
            "description": "Gets or sets unique identifier of Community for this Role, if this is a Community Role, null otherwise.",
            "format": "guid",
            "nullable": true
          },
          "RoleTypeId": {
            "type": "string",
            "description": "Gets or sets unique identifier of Role Type for this Role, if this is an Account Role. This is not a customer defined Role.",
            "format": "guid",
            "nullable": true
          }
        }
      },
      "RoleScope": {
        "type": "integer",
        "description": "Scope of Role.",
        "x-enumNames": [
          "Account",
          "Community",
          "Cluster"
        ],
        "enum": [
          1,
          2,
          3
        ]
      },
      "User": {
        "type": "object",
        "description": "Object for retrieving a User.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Gets or sets unique User ID.",
            "format": "guid"
          },
          "GivenName": {
            "type": "string",
            "description": "Gets or sets given name of user.",
            "nullable": true
          },
          "Surname": {
            "type": "string",
            "description": "Gets or sets surname of user.",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "description": "Gets or sets name of user.",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "description": "Gets or sets email of user.",
            "nullable": true
          },
          "ContactEmail": {
            "type": "string",
            "description": "Gets or sets contact email for user. User will only be contacted\nthrough this email.",
            "nullable": true
          },
          "ContactGivenName": {
            "type": "string",
            "description": "Gets or sets preferred contact name for user.",
            "nullable": true
          },
          "ContactSurname": {
            "type": "string",
            "description": "Gets or sets preferred contact surname for user.",
            "nullable": true
          },
          "ExternalUserId": {
            "type": "string",
            "description": "Gets or sets provider id for user. This is the unique ID we\nget from the Identity Provider.",
            "nullable": true
          },
          "IdentityProviderId": {
            "type": "string",
            "description": "Gets or sets Identity Provider Id used to authenticate User.\nWill be set once the User accepts an invitation.\nIf not specified when sending the invitation to\nthe User, it can be any of the Identity Provider\nIds configured for this Tenant.",
            "format": "guid",
            "nullable": true
          },
          "RoleIds": {
            "type": "array",
            "description": "Gets or sets list of strings of RoleIds.",
            "nullable": true,
            "items": {
              "type": "string",
              "format": "guid"
            }
          }
        }
      },
      "UserMultiStatusResponse": {
        "type": "object",
        "description": "MultiStatusResponse objects returned in a 207 response.",
        "additionalProperties": false,
        "properties": {
          "OperationId": {
            "type": "string",
            "description": "Gets or sets operationId that resulted in this error.",
            "nullable": true
          },
          "Error": {
            "type": "string",
            "description": "Gets or sets string message describing the error.",
            "nullable": true
          },
          "Reason": {
            "type": "string",
            "description": "Gets or sets reason that caused the error.",
            "nullable": true
          },
          "ChildErrors": {
            "type": "array",
            "description": "Gets or sets list of ChildErrors.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/MultiStatusResponseChildError"
            }
          },
          "Data": {
            "type": "array",
            "description": "Gets or sets data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "UserStatus": {
        "type": "object",
        "description": "Object used when getting User status.",
        "additionalProperties": false,
        "properties": {
          "InvitationStatus": {
            "description": "Gets or sets status of user invitation. Can be: InvitationAccepted (0),  NoInvitation (1), InvitationNotSent (2), InvitationSent (3), InvitationExpired (4).",
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserInvitationStatus"
              }
            ]
          },
          "User": {
            "description": "Gets or sets user information.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ]
          }
        }
      },
      "UserInvitationStatus": {
        "type": "integer",
        "description": "User Invitation Status.",
        "x-enumNames": [
          "InvitationAccepted",
          "NoInvitation",
          "InvitationNotSent",
          "InvitationSent",
          "InvitationExpired"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4
        ]
      },
      "UserCreateOrUpdate": {
        "type": "object",
        "description": "Object when updating an User.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Gets or sets user Id for the user. When creating a user, if User ID is not specified, one will be generated.",
            "format": "guid",
            "nullable": true
          },
          "ExternalUserId": {
            "type": "string",
            "description": "Gets or sets user ExternalUserId for the user. Must be specified if Identity Provider is Windows Active Directory.",
            "nullable": true
          },
          "ContactGivenName": {
            "type": "string",
            "description": "Gets or sets preferred name to be used when contacting user.",
            "maxLength": 48,
            "minLength": 0,
            "nullable": true
          },
          "ContactSurname": {
            "type": "string",
            "description": "Gets or sets preferred surname to be used when contacting user.",
            "maxLength": 48,
            "minLength": 0,
            "nullable": true
          },
          "ContactEmail": {
            "type": "string",
            "description": "Gets or sets preferred contact email to be used. This does not have to be the same as the user's Identity Provider email.",
            "format": "email",
            "nullable": true
          },
          "IdentityProviderId": {
            "type": "string",
            "description": "Gets or sets Identity Provider this user will be required to use to login.  If null, the Identity Provider Id will\nbe set when creating the Invitation.",
            "format": "guid",
            "nullable": true
          },
          "IdentityProviderSpecificUserId": {
            "type": "string",
            "description": "Identity Provider Specific User Id. Ex. ObjectId for AD and AAD.",
            "nullable": true
          },
          "RoleIds": {
            "type": "array",
            "description": "Gets or sets list of strings of RoleIds.",
            "nullable": true,
            "items": {
              "type": "string",
              "format": "guid"
            }
          }
        }
      }
    }
  }
}